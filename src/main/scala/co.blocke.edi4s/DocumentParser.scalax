package co.blocke.edi4s

import model.*
import zio.*

// DocumentParser to manage multiple segments
class DocumentParser(
                      segmentParsers: Map[String, SegmentParser],
                      segmentOrder: List[String],
                      requiredFields: Map[String, List[Int]] ) {

  def parse(pc: ParseContext): ZIO[Any, Throwable, (List[List[Element]], ParseContext)] = {
    // Initialize empty lists for the result and the context
    var parseContext = pc
    var documentFields = List.empty[List[Element]]  // Accumulated parsed fields for the document

    // Use for-comprehension to process each segment
    ZIO.foreach(segmentOrder) { segmentName =>
      // Retrieve the segment parser from the map
      segmentParsers.get(segmentName) match {
        case Some(segmentParser) =>
          // Parse the segment and handle errors within the for-comprehension
          segmentParser.parse(parseContext).flatMap {
            case (fields, updatedContext) =>
              // Update the document fields and parse context
              documentFields = documentFields :+ fields
              parseContext = updatedContext
              ZIO.succeed(())
          }.catchAll {
            // Handle the case where the segment is missing (optional segments)
            case _: MissingRequiredFieldException =>
              documentFields = documentFields :+ List()  // Add empty list for missing optional segment
              ZIO.succeed(())
            case e: Throwable =>
              ZIO.fail(e)  // Propagate other errors
          }

        case None =>
          // If the segment parser is not found in the map, fail the ZIO
          ZIO.fail(new Exception(s"Parser for segment $segmentName not found"))
      }
    }.map(_ => (documentFields, parseContext))  // After processing all segments, return the result
  }
}